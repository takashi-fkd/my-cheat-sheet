# CloudFormationに対応したEC2の起動テンプレートを試してみた
# https://dev.classmethod.jp/articles/cfn-launch-template-ec2/

AWSTemplateFormatVersion: '2010-09-09'
Description: ec2-LaunchTemplate-instance
Parameters:
  Env:
    Description: Choose the environment to create
    Type: String
    Default: development
    AllowedValues:
    - development
    - staging
    - production
  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  VpcSubnetCidr:
    Description: VPC subnet CIDR
    Type: String
    Default: 172.31.0.0/16
  StaticIPforSSH:
    Description: Static IP for SSH access
    Type: String
    Default: 127.0.0.1/32
  VpcEc2Subnet1:
    Description: EC2 subnet 1(AZ-a)
    Type: AWS::EC2::Subnet::Id
  VpcEc2Subnet2:
    Description: EC2 subnet 2(AZ-c)
    Type: AWS::EC2::Subnet::Id
  Ec2ImageId:
    Description: AMI ID
    Type: String
    Default: ami-2724cf58
  Ec2InstanceType:
    Description: EC2 InstanceType
    Type: String
    Default: t2.micro
  Ec2InstanceKeyName:
    Description: EC2 SSH KEY
    Type: AWS::EC2::KeyPair::KeyName
    Default: SSHKey
  Ec2InstanceTagName:
    Description: EC2 Tag Name
    Type: String
    Default: test-lt-ec2-20180605
  Ec2AutoscaleMinSize:
    Description: AutoScalingGroup MinSize
    Type: String
    Default: '1'
  Ec2AutoscaleMaxSize:
    Description: AutoScalingGroup MaxSize
    Type: String
    Default: '1'
  Ec2AutoscaleDesiredCapacity:
    Description: AutoScalingGroup DesiredCapacity
    Type: String
    Default: '1'
Resources:
  Ec2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        SecurityGroupIds:
        - !Ref 'Ec2SecurityGroup'
        - !Ref 'Ec2SecurityGroupSSH'
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Env
            Value: !Ref 'Env'
        - ResourceType: volume
          Tags:
          - Key: Env
            Value: !Ref 'Env'
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: !Ref 'AWS::StackName'
        UserData:
          Fn::Base64: |
            #!/bin/bash -xe
            date > /tmp/run.log
            yum update -y
            yum install jq awslogs -y
            chkconfig awslogs on
            service awslogs start
            if [ ! -f /swapfile ]; then dd if=/dev/zero of=/swapfile bs=1M count=128; chmod 600 /swapfile; mkswap /swapfile; swapon /swapfile; echo "/swapfile  swap  swap  defaults  0  0" >> /etc/fstab; fi
        InstanceInitiatedShutdownBehavior: terminate
        IamInstanceProfile:
          Arn: !GetAtt 'Ec2IAMProfile.Arn'
        KeyName: !Ref 'Ec2InstanceKeyName'
        ImageId: !Ref 'Ec2ImageId'
        Monitoring:
          Enabled: false
        CreditSpecification:
          CpuCredits: standard
        InstanceType: !Ref 'Ec2InstanceType'
        InstanceMarketOptions:
          SpotOptions:
            SpotInstanceType: one-time
            InstanceInterruptionBehavior: terminate
          MarketType: spot
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: 1
            VolumeType: gp2
            DeleteOnTermination: true

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref 'Ec2InstanceLaunchTemplate'
        Version: !GetAtt 'Ec2InstanceLaunchTemplate.LatestVersionNumber'
      SubnetId: !Ref 'VpcEc2Subnet1'
  Ec2InstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref 'VpcEc2Subnet1'
      - !Ref 'VpcEc2Subnet2'
      LaunchTemplate:
        LaunchTemplateId: !Ref 'Ec2InstanceLaunchTemplate'
        Version: !GetAtt 'Ec2InstanceLaunchTemplate.LatestVersionNumber'
      MinSize: !Ref 'Ec2AutoscaleMinSize'
      MaxSize: !Ref 'Ec2AutoscaleMaxSize'
      DesiredCapacity: !Ref 'Ec2AutoscaleDesiredCapacity'
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: allow ICMP via same VPC
      SecurityGroupIngress:
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: !Ref 'VpcSubnetCidr'
  Ec2SecurityGroupSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: allow SSH via static IP
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'StaticIPforSSH'
  Ec2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies: !Ref 'AWS::NoValue'
      RoleName: !Ref 'AWS::NoValue'
  Ec2RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Ec2RolePolicies
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource:
          - arn:aws:logs:*:*:*
      Roles:
      - !Ref 'Ec2IAMRole'
  Ec2IAMProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Ec2IAMRole
    Properties:
      Path: /
      Roles:
      - !Ref 'Ec2IAMRole'
